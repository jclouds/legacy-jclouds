/**
 * Licensed to jclouds, Inc. (jclouds) under one or more
 * contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  jclouds licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.jclouds.cloudwatch.domain;

import com.google.common.collect.Sets;
import org.jclouds.javax.annotation.Nullable;

import java.util.Date;
import java.util.Set;

/**
 * @see <a href="http://docs.amazonwebservices.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html" />
 *
 * @author Jeremy Whitlock
 */
public class MetricDatum {

   private final Set<Dimension> dimensions;
   private final String metricName;
   private final StatisticSet statisticSet;
   private final Date timestamp;
   private final Unit unit;
   private final Double value;

   /**
    * Private constructor to enforce using {@link Builder}.
    */
   private MetricDatum(Set<Dimension> dimensions, String metricName, StatisticSet statisticSet, Date timestamp,
                       Unit unit, Double value) {
      this.dimensions = dimensions;
      this.metricName = metricName;
      this.statisticSet = statisticSet;
      this.timestamp = timestamp;
      this.unit = unit;
      this.value = value;
   }

   /**
    * return the list of dimensions describing the the metric.
    */
   @Nullable
   public Set<Dimension> getDimensions() {
      return dimensions;
   }

   /**
    * return the metric name for the metric.
    */
   @Nullable
   public String getMetricName() {
      return metricName;
   }

   /**
    * return the object describing the set of statistical values for the metric
    */
   @Nullable
   public StatisticSet getStatisticSet() {
      return statisticSet;
   }

   /**
    * return the time stamp used for the metric
    */
   @Nullable
   public Date getTimestamp() {
      return timestamp;
   }

   /**
    * return Standard unit used for the metric.
    */
   @Nullable
   public Unit getUnit() {
      return unit;
   }

   /**
    * return the actual value of the metric
    */
   @Nullable
   public Double getValue() {
      return value;
   }

   /**
    * Returns a new builder. The generated builder is equivalent to the builder
    * created by the {@link Builder} constructor.
    */
   public static Builder builder() {
      return new Builder();
   }

   public static class Builder {

      private Set<Dimension> dimensions;
      private String metricName;
      private StatisticSet statisticSet;
      private Date timestamp;
      private Unit unit;
      private Double value;

      /**
       * Creates a new builder. The returned builder is equivalent to the builder
       * generated by {@link org.jclouds.cloudwatch.domain.MetricDatum#builder}.
       */
      public Builder() {}

      /**
       * A list of dimensions describing qualities of the metric.
       *
       * @param dimensions the dimensions describing the qualities of the metric
       *
       * @return this {@code Builder} object
       */
      public Builder dimensions(Set<Dimension> dimensions) {
         this.dimensions = dimensions;
         return this;
      }

      /**
       * A dimension describing qualities of the metric.
       *
       * @param dimension the dimension describing the qualities of the metric
       *
       * @return this {@code Builder} object
       */
      public Builder dimension(Dimension dimension) {
         if (dimensions == null) {
            dimensions = Sets.newLinkedHashSet();
         }
         this.dimensions.add(dimension);
         return this;
      }

      /**
       * The name of the metric.
       *
       * @param metricName the metric name
       *
       * @return this {@code Builder} object
       */
      public Builder metricName(String metricName) {
         this.metricName = metricName;
         return this;
      }

      /**
       * The object describing the set of statistical values describing the metric.
       *
       * @param statisticSet the object describing the set of statistical values for the metric
       *
       * @return this {@code Builder} object
       */
      public Builder statisticSet(StatisticSet statisticSet) {
         this.statisticSet = statisticSet;
         return this;
      }

      /**
       * The time stamp used for the metric.  If not specified, the default value is set to the time the metric data was
       * received.
       *
       * @param timestamp the time stamp used for the metric
       *
       * @return this {@code Builder} object
       */
      public Builder timestamp(Date timestamp) {
         this.timestamp = timestamp;
         return this;
      }

      /**
       * The unit for the metric.
       *
       * @param unit the unit for the metric
       *
       * @return this {@code Builder} object
       */
      public Builder unit(Unit unit) {
         this.unit = unit;
         return this;
      }

      /**
       * The value for the metric.
       *
       * @param value the value for the metric
       *
       * @return this {@code Builder} object
       */
      public Builder value(Double value) {
         this.value = value;
         return this;
      }

      /**
       * Returns a newly-created {@code MetricDatum} based on the contents of the {@code Builder}.
       */
      public MetricDatum build() {
         return new MetricDatum(dimensions, metricName, statisticSet, timestamp, unit, value);
      }

   }

}
