/**
 * Licensed to jclouds, Inc. (jclouds) under one or more
 * contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  jclouds licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.jclouds.cloudwatch.options;

import com.google.common.collect.Sets;
import org.jclouds.cloudwatch.domain.Dimension;
import org.jclouds.http.options.BaseHttpRequestOptions;
import org.jclouds.javax.annotation.Nullable;

import java.util.Set;

/**
 * Options used to list available metrics.
 *
 * @see <a href="http://docs.amazonwebservices.com/AmazonCloudWatch/latest/APIReference/API_ListMetrics.html" />
 *
 * @author Jeremy Whitlock
 */
public class ListMetricsOptions extends BaseHttpRequestOptions {

   private final Set<Dimension> dimensions;
   private final String metricName;
   private final String namespace;
   private final String nextToken;

   /**
    * Private constructor to enforce using {@link Builder}.
    */
   private ListMetricsOptions(@Nullable String namespace, @Nullable String metricName,
                              @Nullable Set<Dimension> dimensions, @Nullable String nextToken) {
      this.dimensions = dimensions;
      this.metricName = metricName;
      this.namespace = namespace;
      this.nextToken = nextToken;
   }

   /**
    * return the set of dimensions for this request
    */
   @Nullable
   public Set<Dimension> getDimensions() {
      return dimensions;
   }

   /**
    * return the metric name for this request
    */
   @Nullable
   public String getMetricName() {
      return metricName;
   }

   /**
    * return the namespace for this request
    */
   @Nullable
   public String getNamespace() {
      return namespace;
   }

   /**
    * return the next token for this request
    */
   @Nullable
   public String getNextToken() {
      return nextToken;
   }

   /**
    * Returns a new builder. The generated builder is equivalent to the builder
    * created by the {@link Builder} constructor.
    */
   public static Builder builder() {
      return new Builder();
   }

   public static class Builder {

      private Set<Dimension> dimensions = Sets.newLinkedHashSet();
      private String metricName;
      private String namespace;
      private String nextToken;

      /**
       * Creates a new builder. The returned builder is equivalent to the builder
       * generated by {@link ListMetricsOptions#builder}.
       */
      public Builder() {}

      /**
       * The namespace to filter against.
       *
       * @param namespace the namespace to filter against
       *
       * @return this {@code Builder} object
       */
      public Builder namespace(String namespace) {
         this.namespace = namespace;
         return this;
      }

      /**
       * The name of the metric to filter against.
       *
       * @param metricName the metric name to filter against
       *
       * @return this {@code Builder} object
       */
      public Builder metricName(String metricName) {
         this.metricName = metricName;
         return this;
      }

      /**
       * A list of dimensions to filter against.
       *
       * @param dimensions the dimensions to filter against
       *
       * @return this {@code Builder} object
       */
      public Builder dimensions(Set<Dimension> dimensions) {
         this.dimensions = dimensions;
         return this;
      }

      /**
       * A dimension to filter the available metrics by.
       *
       * @param dimension a dimension to filter the returned metrics by
       *
       * @return this {@code Builder} object
       */
      public Builder dimension(Dimension dimension) {
         this.dimensions.add(dimension);
         return this;
      }

      /**
       * The token returned by a previous call to indicate that there is more data available.
       *
       * @param nextToken the next token indicating that there is more data available
       *
       * @return this {@code Builder} object
       */
      public Builder nextToken(String nextToken) {
         this.nextToken = nextToken;
         return this;
      }

      /**
       * Returns a newly-created {@code ListMetricsOptions} based on the contents of
       * the {@code Builder}.
       */
      public ListMetricsOptions build() {
         ListMetricsOptions lmo = new ListMetricsOptions(namespace, metricName, dimensions, nextToken);
         int dimensionIndex = 1;

         // If namespace isn't specified, don't include it
         if (namespace != null) {
            lmo.formParameters.put("Namespace", namespace);
         }
         // If metricName isn't specified, don't include it
         if (metricName != null) {
            lmo.formParameters.put("MetricName", metricName);
         }

         // If dimensions isn't specified, don't include it
         if (dimensions != null) {
            for (Dimension dimension : dimensions) {
               lmo.formParameters.put("Dimensions.member." + dimensionIndex + ".Name", dimension.getName());
               lmo.formParameters.put("Dimensions.member." + dimensionIndex + ".Value", dimension.getValue());
               dimensionIndex++;
            }
         }

         // If nextToken isn't specified, don't include it
         if (nextToken != null) {
            lmo.formParameters.put("NextToken", nextToken);
         }

         return lmo;
      }
   }

}
