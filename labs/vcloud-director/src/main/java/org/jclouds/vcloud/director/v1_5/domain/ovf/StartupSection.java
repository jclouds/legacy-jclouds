//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2012.02.08 at 02:47:44 PM GMT
//

package org.jclouds.vcloud.director.v1_5.domain.ovf;

import static com.google.common.base.Objects.equal;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.xml.bind.annotation.XmlAnyElement;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

import com.google.common.base.Objects;
import com.google.common.base.Objects.ToStringHelper;
import com.google.common.collect.ImmutableList;

/**
 * Specifies the order in which entities in a VirtualSystemCollection are powered on and shut down
 *
 * <pre>
 * &lt;complexType name="StartupSection_Type" /&gt;
 * </pre>
 */
@XmlRootElement(name = "StartupSection")
public class StartupSection extends SectionType {

   public static Builder<?> builder() {
      return new ConcreteBuilder();
   }

   public Builder<?> toBuilder() {
      return builder().fromStartupSection(this);
   }

   private static class ConcreteBuilder extends Builder<ConcreteBuilder> {
   }
   
   public static class Builder<B extends Builder<B>> extends SectionType.Builder<B> {

      private List<StartupSectionItem> item = Collections.emptyList();
      private List<Object> any = Collections.emptyList();

      /**
       * @see StartupSection#getItem()
       */
      public B item(List<StartupSectionItem> item) {
         this.item = item;
         return self();
      }

      /**
       * @see StartupSection#getAny()
       */
      public B any(List<Object> any) {
         this.any = any;
         return self();
      }

      @Override
      public StartupSection build() {
         return new StartupSection(this);
      }
      
      public B fromStartupSection(StartupSection in) {
         return fromSectionType(in).item(item).any(any);
      }
   }

   @XmlElement(name = "Item")
   private List<StartupSectionItem> item;
   @XmlAnyElement(lax = true)
   private List<Object> any;

   protected StartupSection() {
      // For JAXB
   }

   public StartupSection(Builder<?> builder) {
      super(builder);
      this.item = (item != null) ? ImmutableList.<StartupSectionItem>copyOf(builder.item) : Collections.<StartupSectionItem>emptyList();
      this.any = (any != null) ? ImmutableList.<Object>copyOf(builder.any) : Collections.<Object>emptyList();
   }

   /**
    * Gets the value of the item property.
    * <p>
    * This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned
    * list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the item property.
    * <p>
    * For example, to add a new item, do as follows:
    *
    * <pre>
    * getItem().add(newItem);
    * </pre>
    * <p>
    * Objects of the following type(s) are allowed in the list {@link StartupSectionItem }
    */
   public List<StartupSectionItem> getItem() {
      if (item == null) {
         item = new ArrayList<StartupSectionItem>();
      }
      return this.item;
   }

   /**
    * Gets the value of the any property.
    * <p>
    * This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned
    * list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the any property.
    * <p>
    * For example, to add a new item, do as follows:
    *
    * <pre>
    * getAny().add(newItem);
    * </pre>
    * <p>
    * Objects of the following type(s) are allowed in the list {@link Object } {@link Element }
    */
   public List<Object> getAny() {
      if (any == null) {
         any = new ArrayList<Object>();
      }
      return this.any;
   }
   
   @Override
   public boolean equals(Object o) {
      if (this == o)
         return true;
      if (o == null || getClass() != o.getClass())
         return false;
      StartupSection that = StartupSection.class.cast(o);
      return super.equals(that) &&
            equal(this.item, that.item) && equal(this.any, that.any);
   }

   @Override
   public int hashCode() {
      return Objects.hashCode(super.hashCode(), item, any);
   }

   @Override
   public ToStringHelper string() {
      return super.string().add("item", item).add("any", any);
   }
}
